"use strict";(()=>{var e={};e.id=551,e.ids=[551],e.modules={399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},7147:e=>{e.exports=require("fs")},1017:e=>{e.exports=require("path")},4486:(e,t,s)=>{s.r(t),s.d(t,{originalPathname:()=>A,patchFetch:()=>v,requestAsyncStorage:()=>N,routeModule:()=>E,serverHooks:()=>g,staticGenerationAsyncStorage:()=>T});var n={};s.r(n),s.d(n,{DELETE:()=>h,GET:()=>c,PATCH:()=>m,POST:()=>d,PUT:()=>l});var r=s(9303),a=s(8716),i=s(670),o=s(2512),p=s(7070);let u=o.Z.getInstance();async function c(e){try{let{searchParams:t}=new URL(e.url),s=t.get("date"),n=t.get("status"),r={};s&&(r.date=s),n&&(r.status=n);let a=u.getAppointments(r);return p.NextResponse.json({appointments:a,total:a.length})}catch(e){return console.error("Error fetching appointments:",e),p.NextResponse.json({error:"Failed to fetch appointments"},{status:500})}}async function d(e){try{let t=await e.json();for(let e of["firstName","lastName","service","date","time","phone","email"])if(!t[e])return p.NextResponse.json({error:`Missing required field: ${e}`},{status:400});t.status||(t.status="scheduled");let s=u.createAppointment(t);if(!s.success)return p.NextResponse.json({error:s.errors?.join(", ")||"Failed to create appointment"},{status:400});return p.NextResponse.json({appointment:s.appointment,message:"Appointment created successfully"},{status:201})}catch(e){return console.error("Error creating appointment:",e),p.NextResponse.json({error:"Failed to create appointment"},{status:500})}}async function l(e){try{let{searchParams:t}=new URL(e.url),s=t.get("id");if(!s)return p.NextResponse.json({error:"Appointment ID is required"},{status:400});let n=await e.json(),r=u.updateAppointment(s,n);if(!r.success)return p.NextResponse.json({error:r.errors?.join(", ")||"Failed to update appointment"},{status:400});return p.NextResponse.json({appointment:r.appointment,message:"Appointment updated successfully"})}catch(e){return console.error("Error updating appointment:",e),p.NextResponse.json({error:"Failed to update appointment"},{status:500})}}async function m(e){try{let{id:t,status:s}=await e.json();if(!t||!s)return p.NextResponse.json({error:"Appointment ID and status are required"},{status:400});if(!["scheduled","completed","cancelled","no-show"].includes(s))return p.NextResponse.json({error:"Invalid status. Must be one of: scheduled, completed, cancelled, no-show"},{status:400});let n=u.updateAppointmentStatus(t,s);if(!n.success)return p.NextResponse.json({error:n.errors?.join(", ")||"Failed to update appointment status"},{status:400});return p.NextResponse.json({appointment:n.appointment,message:"Appointment status updated successfully"})}catch(e){return console.error("Error updating appointment status:",e),p.NextResponse.json({error:"Failed to update appointment status"},{status:500})}}async function h(e){try{let{searchParams:t}=new URL(e.url),s=t.get("id");if(!s)return p.NextResponse.json({error:"Appointment ID is required"},{status:400});let n=u.deleteAppointment(s);if(!n.success)return p.NextResponse.json({error:n.errors?.join(", ")||"Failed to delete appointment"},{status:400});return p.NextResponse.json({message:"Appointment deleted successfully"})}catch(e){return console.error("Error deleting appointment:",e),p.NextResponse.json({error:"Failed to delete appointment"},{status:500})}}let E=new r.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/admin/appointments/route",pathname:"/api/admin/appointments",filename:"route",bundlePath:"app/api/admin/appointments/route"},resolvedPagePath:"/Users/surafellemma/Desktop/Fifi Hair Salon/app/api/admin/appointments/route.ts",nextConfigOutput:"",userland:n}),{requestAsyncStorage:N,staticGenerationAsyncStorage:T,serverHooks:g}=E,A="/api/admin/appointments/route";function v(){return(0,i.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:T})}},2512:(e,t,s)=>{s.d(t,{Z:()=>p});let n=require("better-sqlite3");var r=s.n(n),a=s(1017);let i={"box-braids":120,cornrows:80,"senegalese-twist":150,"goddess-braids":180,dreadlocks:200,"hair-straightening":100,"weave-sewing":250,"wash-set":60,"silk-press":80,"afro-styling":70,updo:90,"color-treatment":150,"hair-cut":50,trim:25,"deep-conditioning":40,blowout:45,"braid-removal":30,"hair-consultation":25};class o{constructor(){let e=(0,a.join)(process.cwd(),"data","appointments.db"),t=s(7147),n=(0,a.join)(process.cwd(),"data");t.existsSync(n)||t.mkdirSync(n,{recursive:!0}),this.db=new(r())(e,{verbose:void 0}),this.db.pragma("journal_mode = WAL"),this.db.pragma("foreign_keys = ON"),this.db.pragma("secure_delete = ON"),this.initializeTables()}static getInstance(){return o.instance||(o.instance=new o),o.instance}initializeTables(){let e=`
      CREATE TABLE IF NOT EXISTS appointments (
        id TEXT PRIMARY KEY,
        firstName TEXT NOT NULL CHECK(length(firstName) > 0 AND length(firstName) <= 50),
        lastName TEXT NOT NULL CHECK(length(lastName) > 0 AND length(lastName) <= 50),
        service TEXT NOT NULL CHECK(length(service) > 0 AND length(service) <= 100),
        servicePrice REAL NOT NULL CHECK(servicePrice >= 0),
        date TEXT NOT NULL CHECK(date GLOB '[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]'),
        time TEXT NOT NULL CHECK(time GLOB '[0-9]*:[0-9][0-9] [AP]M'),
        phone TEXT NOT NULL CHECK(length(phone) >= 10 AND length(phone) <= 20),
        email TEXT NOT NULL CHECK(email LIKE '%@%' AND length(email) <= 100),
        notes TEXT CHECK(length(notes) <= 500),
        status TEXT NOT NULL DEFAULT 'scheduled' CHECK(status IN ('scheduled', 'completed', 'cancelled', 'no-show')),
        createdAt TEXT NOT NULL DEFAULT (datetime('now')),
        updatedAt TEXT NOT NULL DEFAULT (datetime('now'))
      )
    `,t=`
      CREATE INDEX IF NOT EXISTS idx_appointments_date ON appointments(date);
      CREATE INDEX IF NOT EXISTS idx_appointments_status ON appointments(status);
      CREATE INDEX IF NOT EXISTS idx_appointments_email ON appointments(email);
    `,s=`
      CREATE TRIGGER IF NOT EXISTS update_appointments_updated_at
      AFTER UPDATE ON appointments
      BEGIN
        UPDATE appointments SET updatedAt = datetime('now') WHERE id = NEW.id;
      END
    `;this.db.exec(e),this.db.exec(t),this.db.exec(s);try{this.db.prepare("SELECT servicePrice FROM appointments LIMIT 1").get()}catch(e){this.db.exec("ALTER TABLE appointments ADD COLUMN servicePrice REAL DEFAULT 0"),console.log("Added servicePrice column to existing database")}}getServicePrice(e){return i[e.toLowerCase().replace(/\s+/g,"-")]||0}validateAppointment(e){let t=[];return e.firstName&&(0===e.firstName.length||e.firstName.length>50)&&t.push("First name must be between 1 and 50 characters"),e.lastName&&(0===e.lastName.length||e.lastName.length>50)&&t.push("Last name must be between 1 and 50 characters"),e.service&&(0===e.service.length||e.service.length>100)&&t.push("Service must be between 1 and 100 characters"),void 0!==e.servicePrice&&(e.servicePrice<0||e.servicePrice>1e4)&&t.push("Service price must be between $0 and $10,000"),e.date&&!/^\d{4}-\d{2}-\d{2}$/.test(e.date)&&t.push("Date must be in YYYY-MM-DD format"),e.time&&!/^\d{1,2}:\d{2} [AP]M$/.test(e.time)&&t.push("Time must be in H:MM AM/PM or HH:MM AM/PM format"),e.phone&&(e.phone.length<10||e.phone.length>20)&&t.push("Phone must be between 10 and 20 characters"),e.email&&(!e.email.includes("@")||e.email.length>100)&&t.push("Email must be valid and under 100 characters"),e.notes&&e.notes.length>500&&t.push("Notes must be under 500 characters"),e.status&&!["scheduled","completed","cancelled","no-show"].includes(e.status)&&t.push("Status must be one of: scheduled, completed, cancelled, no-show"),{isValid:0===t.length,errors:t}}sanitizeInput(e){return e.replace(/[<>]/g,"").replace(/['"]/g,"").trim()}getAppointments(e){let t="SELECT * FROM appointments",s=[],n=[];return e?.date&&(n.push("date = ?"),s.push(e.date)),e?.status&&(n.push("status = ?"),s.push(e.status)),n.length>0&&(t+=" WHERE "+n.join(" AND ")),t+=" ORDER BY date ASC, time ASC",this.db.prepare(t).all(...s)}getAppointmentById(e){return this.db.prepare("SELECT * FROM appointments WHERE id = ?").get(e)}createAppointment(e){let t=this.validateAppointment(e);if(!t.isValid)return{success:!1,errors:t.errors};let s={...e,firstName:this.sanitizeInput(e.firstName),lastName:this.sanitizeInput(e.lastName),service:this.sanitizeInput(e.service),servicePrice:e.servicePrice||this.getServicePrice(e.service),phone:this.sanitizeInput(e.phone),email:this.sanitizeInput(e.email),notes:e.notes?this.sanitizeInput(e.notes):null},n=Date.now().toString()+Math.random().toString(36).substr(2,9),r=new Date().toISOString();try{this.db.prepare(`
        INSERT INTO appointments (id, firstName, lastName, service, servicePrice, date, time, phone, email, notes, status, createdAt, updatedAt)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `).run(n,s.firstName,s.lastName,s.service,s.servicePrice,s.date,s.time,s.phone,s.email,s.notes,s.status,r,r);let e=this.getAppointmentById(n);return{success:!0,appointment:e}}catch(e){return console.error("Database error:",e),{success:!1,errors:["Failed to create appointment"]}}}updateAppointment(e,t){let s=this.validateAppointment(t);if(!s.isValid)return{success:!1,errors:s.errors};if(!this.getAppointmentById(e))return{success:!1,errors:["Appointment not found"]};let n={...t};t.firstName&&(n.firstName=this.sanitizeInput(t.firstName)),t.lastName&&(n.lastName=this.sanitizeInput(t.lastName)),t.service&&(n.service=this.sanitizeInput(t.service)),t.phone&&(n.phone=this.sanitizeInput(t.phone)),t.email&&(n.email=this.sanitizeInput(t.email)),t.notes&&(n.notes=this.sanitizeInput(t.notes));try{let t=Object.keys(n).map(e=>`${e} = ?`).join(", "),s=Object.values(n);this.db.prepare(`UPDATE appointments SET ${t} WHERE id = ?`).run(...s,e);let r=this.getAppointmentById(e);return{success:!0,appointment:r}}catch(e){return console.error("Database error:",e),{success:!1,errors:["Failed to update appointment"]}}}updateAppointmentStatus(e,t){try{let s=this.db.prepare(`
        UPDATE appointments 
        SET status = ?, updatedAt = datetime('now')
        WHERE id = ?
      `).run(t,e);if(0===s.changes)return{success:!1,errors:["Appointment not found"]};let n=this.getAppointmentById(e);return{success:!0,appointment:n}}catch(e){return console.error("Database error:",e),{success:!1,errors:["Failed to update appointment status"]}}}deleteAppointment(e){try{let t=this.db.prepare("DELETE FROM appointments WHERE id = ?").run(e);if(0===t.changes)return{success:!1,errors:["Appointment not found"]};return{success:!0}}catch(e){return console.error("Database error:",e),{success:!1,errors:["Failed to delete appointment"]}}}getStats(){let e=this.db.prepare("SELECT COUNT(*) as count FROM appointments").get(),t=new Date().toISOString().split("T")[0],s=this.db.prepare("SELECT COUNT(*) as count FROM appointments WHERE date = ?").get(t),n=new Date(Date.now()-6048e5).toISOString().split("T")[0],r=this.db.prepare("SELECT COUNT(*) as count FROM appointments WHERE date >= ?").get(n),a=this.db.prepare("SELECT status, COUNT(*) as count FROM appointments GROUP BY status").all().reduce((e,t)=>(e[t.status]=t.count,e),{}),i=this.db.prepare("SELECT SUM(servicePrice) as revenue FROM appointments WHERE status = ?").get("completed"),o=this.db.prepare("SELECT SUM(servicePrice) as revenue FROM appointments WHERE date = ? AND status = ?").get(t,"completed"),p=this.db.prepare("SELECT SUM(servicePrice) as revenue FROM appointments WHERE date >= ? AND status = ?").get(n,"completed"),u=this.db.prepare("SELECT SUM(servicePrice) as revenue FROM appointments WHERE status = ?").get("scheduled"),c=this.db.prepare("SELECT SUM(servicePrice) as revenue FROM appointments WHERE date = ? AND status = ?").get(t,"scheduled"),d=this.db.prepare("SELECT SUM(servicePrice) as revenue FROM appointments WHERE date >= ? AND status = ?").get(n,"scheduled");return{total:e.count,today:s.count,thisWeek:r.count,byStatus:a,totalRevenue:i.revenue||0,todayRevenue:o.revenue||0,thisWeekRevenue:p.revenue||0,pendingRevenue:u.revenue||0,todayPendingRevenue:c.revenue||0,thisWeekPendingRevenue:d.revenue||0}}close(){this.db.close()}}let p=o}};var t=require("../../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),n=t.X(0,[948,972],()=>s(4486));module.exports=n})();